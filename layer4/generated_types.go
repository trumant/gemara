// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package layer4

import (
	"time"
)

// Top level schema //
// Evaluation is a collection of assessments of the framework controls and their requirements.
type Evaluation struct {
	// name is a descriptive identifier for the evaluation
	Name string `json:"name"`

	// ID of the Layer 2 Catalog being evaluated in this evaluation
	CatalogID string `json:"catalog_id"`

	// timestamp of when the evaluation execution began. If the field is not provided, the evaluation has not been executed yet.
	StartTime time.Time `json:"start_time,omitempty"`

	// timestamp of when the evaluation execution ended. If the field is not provided, the evaluation has not been executed yet.
	EndTime time.Time `json:"end_time,omitempty"`

	// will be true when the evaluation execution changed the evaluated service and could not successfully revert
	CorruptedState bool `json:"corrupted_state"`

	// one or more evaluations of the framework controls
	ControlEvaluations []ControlEvaluation `json:"control_evaluations"`
}

// URL describes a specific subset of URLs of interest to the framework
// TODO: this definition should be imported from a more appropriate module/package
type URL string

// ControlEvaluation describes the evaluation of the layer 2 control referenced by controlID and the assessment of that control's requirements.
type ControlEvaluation struct {
	// ID of the layer 2 control being evaluated
	ControlID string `json:"control_id"`

	// one or more assessments for each of the control's requirements
	Assessments []Assessment `json:"assessments"`
}

// Assessment describes the evaluation of layer 2 control requirement referenced by requirementID and the assessment methods used to assess that requirement.
type Assessment struct {
	// ID of the Layer 2 Control's Requirement being evaluated
	RequirementID string `json:"requirement_id"`

	// the methods used to assess the requirement
	Methods []AssessmentMethod `json:"methods"`
}

// AssessmentResult describes the result of the assessment of a layer 2 control requirement.
type AssessmentResult struct {
	// status describes what happened when the assessment method was run
	//   - passed when all evidence suggests the control is met
	//   - failed when some evidence suggests the control is not met
	//   - needs_review when evidence was gathered but cannot be reliably interpreted to reach a decision. A human should review the evidence gathered
	//   - error when the method failed to execute
	Status Status `json:"status"`

	// TODO: I can imagine assessment methods potentially making more than a single change, perhaps this should be a list
	Change *Change `json:"change,omitempty"`
}

// Status constrains the acceptable values describing the result of the assessment of a level 2 control requirement.
type Status string

// Change describes whether the execution of an automated assessment of a layer 2 control requirement resulted in changes being made to the system(s) under assessment.
// TODO: flesh out more once we have one or more examples of existing usage/dependency/necessity
type Change struct {
	// TODO: document all fields here with more clarity once we have one or more examples of existing usage/dependency/necessity
	// target name is ¯\_(ツ)_/¯
	TargetName string `json:"target_name"`

	// applied describes whether the change was applied to the system(s) under assessment
	Applied bool `json:"applied"`

	// reverted describes whether the change was reverted from the system(s) under assessment
	Reverted bool `json:"reverted"`

	// error describes whether an error occurred during either the application or reversion of the change
	Error string `json:"error,omitempty"`

	// target object is ¯\_(ツ)_/¯
	TargetObject any/* CUE top */ `json:"target_object,omitempty"`
}
