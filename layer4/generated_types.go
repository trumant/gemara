// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package layer4

// Evaluation is a collection of evaluations of the framework controls and their requirements.
type Evaluation struct {
	// name of the framework being evaluated, ex: NIST 800-53, CCC, OSPS, etc.
	// TODO: why materialize/duplicate this data here if a consumer can simply reference the layer 2 data?
	Name string `json:"name"`

	// frameworkID contains the unique identifier of the framework being evaluated
	// TODO: in the case of versioned frameworks (ex: NIST 800-53), should we expect the version to be part of the ID?
	FrameworkID string `json:"frameworkID"`

	// one or more evaluations of the framework controls
	Evaluations []ControlEvaluation `json:"evaluations"`
}

// URL describes a specific subset of URLs of interest to the framework
// TODO: this definition should be imported from a more appropriate module/package
type URL string

// ControlEvaluation describes the evaluation of the layer 2 control referenced by controlID and the assessment of that control's requirements.
type ControlEvaluation struct {
	// name of the control being evaluated
	// TODO: why materialize/duplicate this data here if a consumer can simply reference the layer 2 data?
	Name string `json:"name"`

	// ID of the layer 2 control being evaluated
	ControlID string `json:"controlID"`

	// TODO: should there also be a frameworkID here to make a ControlEvaluation more self-contained?
	// one or more assessments of the control requirements
	// TODO: should it be 0 or more to account for an evaluation where planning is "in-progress" for which assessments should be run?
	Assessments []Assessment `json:"assessments"`
}

// Assessment describes the evaluation of layer 2 control requirement referenced by requirementID and the assessment methods used to assess that requirement.
type Assessment struct {
	// TODO: should there also be frameworkID and controlID here to make a Assessment more self-contained?
	// ID of the layer 2 control requirement being evaluated
	RequirementID string `json:"requirementID"`

	// the methods used to assess the requirement
	Methods []AssessmentMethod `json:"methods"`
}

// AssessmentMethod describes the method used to assess the layer 2 control requirement referenced by requirementID.
//
// See https://cuelang.org/docs/tour/types/sumstruct/
type AssessmentMethod struct {
}

// AssessmentResult describes the result of the assessment of a layer 2 control requirement.
//   - passed when all evidence suggests the control is met
//   - failed when some evidence suggests the control is not met
//   - needs_review when evidence was gathered but cannot be reliably interpreted to reach a decision. A human should review the evidence gathered
//   - error when the method failed to execute
type AssessmentResult struct {
	Status Status `json:"status"`

	// TODO: I can imagine assessment methods potentially making more than a single change, perhaps this should be a list
	Change *Change `json:"change,omitempty"`
}

// Status constrains the acceptable values describing the result of the assessment of a level 2 control requirement.
type Status string

// Change describes whether the execution of an automated assessment of a layer 2 control requirement resulted in changes being made to the system(s) under assessment.
// TODO: flesh out more once we have one or more examples of existing usage/dependency/necessity
type Change struct {
	// TODO: document all fields here with more clarity once we have one or more examples of existing usage/dependency/necessity
	// target name is ¯\_(ツ)_/¯
	// TODO: update to `@go(TargetName)` when https://github.com/cue-lang/cue/commit/93c1421c23ac8d5ddc8910a9186f5b94e5252ea9 releases in cue > v0.12.1
	// applied describes whether the change was applied to the system(s) under assessment
	Applied bool `json:"applied"`

	// reverted describes whether the change was reverted from the system(s) under assessment
	Reverted bool `json:"reverted"`

	// error describes whether an error occurred during either the application or reversion of the change
	Error string `json:"error,omitempty"`

	// target object is ¯\_(ツ)_/¯
	// TODO: update to go(TargetObject) when https://github.com/cue-lang/cue/commit/93c1421c23ac8d5ddc8910a9186f5b94e5252ea9 releases in cue > v0.12.1
}
